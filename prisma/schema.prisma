// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Child {
  id        String   @id @default(uuid())
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parent    User[]
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  age Int @default(18)

  messagesSent   Message[] @relation("sender")
  messagesGotten Message[] @relation("receiver")

  muted   User[] @relation("muted")
  mutedBy User[] @relation("muted")

  friends  User[] @relation("friends")
  friendOf User[] @relation("friends")

  hasBlocked User[] @relation("blocked")
  blockedBy  User[] @relation("blocked")

  children Child[]

  @@map("users")
}

model Vacation {
  id           String @id @default(uuid())
  fromPlace    String
  toPlace      String
  fromDate     String
  toDate       String
  price        Int
  spentMinutes Int
  luggageInfo  Int
}

model Message {
  id         String      @id @default(uuid())
  type       MessageType
  senderId   String
  fromUser   User        @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  toUser     User        @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  timestamp  DateTime?
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("messages")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deleteOn          DateTime

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

enum MessageType {
  FRIEND_REQUEST
  MEETING_INVITE
  VISIT_NOTIFICATITON
}
